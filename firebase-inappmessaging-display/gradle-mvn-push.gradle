// Copyright 2021 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

apply plugin: 'maven-publish'

def isReleaseBuild() {
    return !project.version.contains("SNAPSHOT")
}

def getOutputDir() {
    if (isReleaseBuild()) {
        return "${project.buildDir}/releases"
    } else {
        return "${project.buildDir}/snapshots"
    }
}

def getArtifactFilePath() {
    if (isReleaseBuild()) {
        return "$buildDir/outputs/aar/firebase-inappmessaging-display-release.aar"
    } else {
        return "$buildDir/outputs/aar/firebase-inappmessaging-display-debug.aar"
    }
}

def getPublicationName() {
    if (isReleaseBuild()) {
        return "release"
    } else {
        return "debug"
    }
}

publishing {
    publications {
        "${getPublicationName()}" (MavenPublication) {
            groupId 'com.example.firebase' // com.company.project
            artifactId 'firebase-inappmessaging-display' // my-component-library
            version project.version // 1.0.0-SNAPSHOT
            artifact getArtifactFilePath()

            // To include project dependencies
            pom.withXml {
                def dependencies = asNode().appendNode('dependencies')
                configurations.getByName("${getPublicationName()}CompileClasspath").getResolvedConfiguration().getFirstLevelModuleDependencies().each {
                    def dependency = dependencies.appendNode('dependency')
                    dependency.appendNode('groupId', it.moduleGroup)
                    dependency.appendNode('artifactId', it.moduleName)
                    dependency.appendNode('version', it.moduleVersion)
                }
            }
        }
    }
    repositories {
        maven {
            url GITLAB_URL_PACKAGES_REGISTRY
            credentials(HttpHeaderCredentials) {
                name = "Private-Token"
                value = GITLAB_ACCESS_TOKEN
            }
            authentication {
                header(HttpHeaderAuthentication)
            }
        }
    }
}